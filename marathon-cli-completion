#!/usr/bin/env bash

_comp_marathon_join-str() {
  delimiter="$1"
  shift
  OUTPUT=""
  for ((n=1; n<=$#; n++)); do
    if [ "$n" -ne 1 ]; then
      OUTPUT+="${delimiter}"
    fi
    OUTPUT+="${!n}"
  done
  echo -n "$OUTPUT"
}

_comp_marathon_curl() {
  case "${prev}" in
    curl)
      COMPREPLY+=( $(compgen -W "/metrics /v2/apps /v2/tasks /v2/deployments /v2/eventSubscriptions /v2/groups /v2/info /v2/leader /v2/queue /v2/tasks /v2/pods" -- "${cur}"))
      return 0
      ;;
  esac
}

_comp_marathon_tasks() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--all --sort -s --columns -c --no-header --no-align --help" -- "${cur}"))
      return 0
      ;;
  esac

  case "${prev}" in
    -c|--columns|-s|--sort)
      local cols curcol others n
      cols=($(echo "$cur" | tr ',' ' '))
      if [ ! ${#cols[@]} = 0 ]; then
        if [ "${cur:${#cur}-1}" = "," ]; then
          cols+=("")
        fi

        curcol=${cols[${#cols[@]}-1]}
        others=$(_comp_marathon_join-str , "${cols[@]:0:${#cols[@]}-1}")
      else
        others=""
        curcol=""
      fi

      COMPREPLY+=( $(compgen -W "default id host appId stagedAt startedAt state version ports servicePorts ipAddresses agentId hcAlive hcFirstSuccess hcLastFailure hcConsecutiveFailures" -- "${curcol}"))
      if [ ! -z "$others" ]; then
        for ((n=0; n<${#COMPREPLY[@]}; n++)); do
          COMPREPLY[$n]="${others},${COMPREPLY[n]}"
        done
      fi

      return 0
      ;;
  esac
}

_comp_marathon_task() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--help --color --no-color" -- "${cur}"))
      return 0
      ;;
    *)
      COMPREPLY+=( $(compgen -W "$(marathon-cli tasks -c id --no-header --no-align)" -- "${cur}"))
      return 0
      ;;
  esac
}

_comp_marathon_restart_app() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--help --color --no-color --force" -- "${cur}"))
      return 0
      ;;
    *)
      COMPREPLY+=( $(compgen -W "$(marathon-cli apps -c id --no-header --no-align)" -- "${cur}"))
      return 0
      ;;
  esac
}

_comp_marathon_delete_app() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--help --color --no-color --force" -- "${cur}"))
      return 0
      ;;
    *)
      COMPREPLY+=( $(compgen -W "$(marathon-cli apps -c id --no-header --no-align)" -- "${cur}"))
      return 0
      ;;
  esac
}

_comp_marathon_pod() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--help --color --no-color" -- "${cur}"))
      return 0
      ;;
    *)
      COMPREPLY+=( $(compgen -W "$(marathon-cli pods -c id --no-header --no-align)" -- "${cur}"))
      return 0
      ;;
  esac
}

_comp_marathon_pods() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--all --sort -s --columns -c --no-header --no-align --help" -- "${cur}"))
      return 0
      ;;
  esac

  case "${prev}" in
    -c|--columns|-s|--sort)
      local cols curcol others n
      cols=($(echo "$cur" | tr ',' ' '))
      if [ ! ${#cols[@]} = 0 ]; then
        if [ "${cur:${#cur}-1}" = "," ]; then
          cols+=("")
        fi

        curcol=${cols[${#cols[@]}-1]}
        others=$(_comp_marathon_join-str , "${cols[@]:0:${#cols[@]}-1}")
      else
        others=""
        curcol=""
      fi

      COMPREPLY+=( $(compgen -W "default id lastChanged lastUpdated status statusSince instances version instanceCount containerCount instanceStatuses imageKinds imageIds volumeMountCounts resources cpus mem disk gpus totalResources totalCpus totalMem totalDisk totalGpus" -- "${curcol}"))
      if [ ! -z "$others" ]; then
        for ((n=0; n<${#COMPREPLY[@]}; n++)); do
          COMPREPLY[$n]="${others},${COMPREPLY[n]}"
        done
      fi

      return 0
      ;;
  esac
}

_comp_marathon_app() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--help --color --no-color" -- "${cur}"))
      return 0
      ;;
    *)
      COMPREPLY+=( $(compgen -W "$(marathon-cli apps -c id --no-header --no-align)" -- "${cur}"))
      return 0
      ;;
  esac
}

_comp_marathon_queue() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--all --sort -s --columns -c --no-header --no-align --help" -- "${cur}"))
      return 0
      ;;
  esac

  case "${prev}" in
    -c|--columns|-s|--sort)
      local cols curcol others n
      cols=($(echo "$cur" | tr ',' ' '))
      if [ ! ${#cols[@]} = 0 ]; then
        if [ "${cur:${#cur}-1}" = "," ]; then
          cols+=("")
        fi

        curcol=${cols[${#cols[@]}-1]}
        others=$(_comp_marathon_join-str , "${cols[@]:0:${#cols[@]}-1}")
      else
        others=""
        curcol=""
      fi

      COMPREPLY+=( $(compgen -W "default id processedOffersCount unusedOffersCount lastUsedOfferAt count since overdue delay rejections UnfulfilledRole UnfulfilledConstraint NoCorrespondingReservationFound AgentMaintenance InsufficientCpus InsufficientMemory InsufficientDisk InsufficientGpus InsufficientPorts DeclinedScarceResources" -- "${curcol}"))
      if [ ! -z "$others" ]; then
        for ((n=0; n<${#COMPREPLY[@]}; n++)); do
          COMPREPLY[$n]="${others},${COMPREPLY[n]}"
        done
      fi

      return 0
      ;;
  esac
}

_comp_marathon_apps() {
  case "${cur}" in
    -*)
      COMPREPLY+=( $(compgen -W "--all --sort -s --columns -c --no-header --no-align --help" -- "${cur}"))
      return 0
      ;;
  esac

  case "${prev}" in
    -c|--columns|-s|--sort)
      local cols curcol others n
      cols=($(echo "$cur" | tr ',' ' '))
      if [ ! ${#cols[@]} = 0 ]; then
        if [ "${cur:${#cur}-1}" = "," ]; then
          cols+=("")
        fi

        curcol=${cols[${#cols[@]}-1]}
        others=$(_comp_marathon_join-str , "${cols[@]:0:${#cols[@]}-1}")
      else
        others=""
        curcol=""
      fi

      COMPREPLY+=( $(compgen -W "default id cmd cpus mem disk gpus executor backoffSeconds backoffFactor maxLaunchDelaySeconds version residency killSelection requirePorts taskCounts tasksStaged tasksRunning tasksHealthy tasksUnhealthy ports container-type docker-network-type volume-count docker-image lastScalingAt lastConfigChangeAt deploymentCount hcCount hcType instances" -- "${curcol}"))
      if [ ! -z "$others" ]; then
        for ((n=0; n<${#COMPREPLY[@]}; n++)); do
          COMPREPLY[$n]="${others},${COMPREPLY[n]}"
        done
      fi

      return 0
      ;;
  esac
}

_comp_marathon() {
  local cur prev words cword
  _init_completion -n : || return
  COMPREPLY=()

  if [ ${COMP_CWORD} = 1 ]; then
    COMPREPLY=( $(compgen -W "curl tasks task apps queue app delete-app restart-app pod pods" -- ${cur}) )

    return 0
  fi

  cmd=${COMP_WORDS[1]}

  case "$cmd" in
    curl)
      _comp_marathon_curl
      ;;
    task)
      _comp_marathon_task
      ;;
    tasks)
      _comp_marathon_tasks
      ;;
    restart-app)
      _comp_marathon_restart_app
      ;;
    delete-app)
      _comp_marathon_delete_app
      ;;
    pod)
      _comp_marathon_pod
      ;;
    pods)
      _comp_marathon_pods
      ;;
    app)
      _comp_marathon_app
      ;;
    queue)
      _comp_marathon_queue
      ;;
    apps)
      _comp_marathon_apps
      ;;
    *)
      return 0
      ;;
  esac

}
complete  -o nospace -o bashdefault -F _comp_marathon marathon-cli
complete  -o nospace -o bashdefault -F _comp_marathon mar
